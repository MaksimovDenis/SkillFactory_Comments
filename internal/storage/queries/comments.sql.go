// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComments = `-- name: CreateComments :exec
INSERT INTO comments 
(news_id, parent_comment_id, content) 
VALUES ($1, $2, $3)
`

type CreateCommentsParams struct {
	NewsID          pgtype.Int4
	ParentCommentID pgtype.Int4
	Content         string
}

func (q *Queries) CreateComments(ctx context.Context, arg CreateCommentsParams) error {
	_, err := q.db.Exec(ctx, createComments, arg.NewsID, arg.ParentCommentID, arg.Content)
	return err
}

const getAllComments = `-- name: GetAllComments :many
SELECT id, news_id, parent_comment_id, content, created_at 
FROM comments
ORDER BY id
`

func (q *Queries) GetAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.NewsID,
			&i.ParentCommentID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
